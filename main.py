import os
import shutil
from os import mkdir

import Recipe.smelt
import Recipe.stonecut
from Common.formatslist import formats


def main():
    print('Create, edit, or delete pack? (or "exit")')
    response = input('> ').lower()
    if response in ['create', 'c', 'new']:
        print('Enter datapack name (e.g. My Pack)')
        name = input('> ')
        print('Enter pack namespace (e.g. my_pack)')
        ns = input('> ')

        project_path = os.path.join('Projects', name)
        data_path = os.path.join(project_path, 'data')
        engine_path = os.path.join(project_path, '.datapackengine')
        namespace_path = os.path.join(data_path, ns)

        paths = [project_path, data_path, engine_path, namespace_path]
        for path in paths:
            if not os.path.exists(path):
                os.mkdir(path)
        print('Successfully created project folder')

        print('What version is this pack for? (Snapshots not supported; old versions may not have full support)')
        mcver = input('> ')
        pkformat = formats[mcver]
        if pkformat >= 16:
            print('Add other supported versions? Y/N (old versions may not have full support)')
            yn = input('> ').lower()
            if yn in ['y', 'yes']:
                print('Enter supported range (min, max)')
                rg = input('> ').split(', ')
                minformat, maxformat = formats[rg[0]], formats[rg[1]]
                verrange = f'"supported_formats": {{"min_inclusive": {minformat}, "max_inclusive": {maxformat}}},\n'
            else:
                verrange = '\n'
        else:
            verrange = '\n'

        print('Enter a pack description (or press enter to skip)')
        desc = input('> ')

        with open(f'Projects/{name}/pack.mcmeta', 'w') as mcmeta:
            mcmeta.write('{\n'
                         '    "pack": {\n'
                         f'        "pack_format": {pkformat},\n'
                         f'        {verrange}'
                         f'        "description": "{desc if desc != "" else "My datapack"}"\n'
                         '    }\n'
                         '}')

        with open(f'Projects/{name}/.datapackengine/engine.meta', 'x') as metafile:
            descnosemi = desc.replace(';\n', '; \n')
            metafile.write(
                f'{name};\n{ns}\n{pkformat};\n{descnosemi if descnosemi != "" else "My datapack"};\n'
            )
        with open(f'Projects/{name}/.datapackengine/README.txt', 'x') as readme:
            readme.write(
                'Datapack generated by Datapack Engine. Find us on Github! :)\n'
                f'This pack is for Minecraft version {mcver} (pack format {pkformat}).'
            )

        print('Successfully wrote metadata')

        print('Add a pack image? Y/N')
        yn = input('> ').lower()
        if yn in ['y', 'yes']:
            print(f'This hasn\'t been implemented yet, but you can manually add "pack.png" to Projects/{name}')
        else:
            print('OK, using default pack image')

        print('Your datapack\'s setup is complete.\nYou can now add content to your pack by typing "edit".\n')
        main()
    elif response in ['edit', 'e']:
        print('Enter the name of the pack you want to edit')
        name = input('> ')
        if os.path.exists(f'Projects/{name}'):
            with open(f'Projects/{name}/.datapackengine/engine.meta', 'r') as metafile:
                lines = metafile.readlines()
                if len(lines) >= 4:
                    name = lines[0].strip().replace(';', '')
                    ns = lines[1].strip().replace(';', '')
                    pkformat = int(lines[2].strip().replace(';', ''))
            print(f'OK, editing {name}')
            print('What content do you want to add? (recipe, loot table, ...)')
            action = input('> ').lower()
            if action in ['recipe', 'crafting recipe']:
                if pkformat < 48:
                    if not os.path.exists(f'Projects/{name}/data/{ns}/recipes'):
                        mkdir(f'Projects/{name}/data/{ns}/recipes')
                else:
                    if not os.path.exists(f'Projects/{name}/data/{ns}/recipe'):
                        mkdir(f'Projects/{name}/data/{ns}/recipe')
                print('OK, making a new recipe')
                print('Crafting, stonecutting, smithing, or smelting (furnace/campfire/smoker/'
                      'blast furnace)?')
                crafttype = input('> ').lower()
                if crafttype in ['furnace', 'smelt', 'smelting', 'blast furnace', 'blast', 'blasting', 'smoker',
                                 'smoke', 'smoking', 'campfire cooking', 'campfire', 'fire']:
                    ###############################################
                    #         Furnace/other smelt recipe          #
                    ###############################################

                    Recipe.smelt.makerecipe(name, ns, pkformat)
                    main()

                elif crafttype in ['stonecutter', 'stonecutting', 'stonecut', 'cutting', 'cut', 'cutter']:
                    ###############################################
                    #             Stonecutter recipe              #
                    ###############################################
                    Recipe.stonecut.makerecipe(name, ns, pkformat)
                    main()

                elif crafttype in ['smithing', 'smith', 'smithing table']:
                    ###############################################
                    #             Stonecutter recipe              #
                    ###############################################
                    Recipe.smith.makerecipe(name, ns, pkformat)

                else:
                    print('Not a valid craft type')
                    main()

        else:
            print('Not a valid pack name; check the capitalization')
            main()
    elif response in ['delete', 'd', 'del', 'remove']:
        print('What pack do you want to delete? (name or "cancel")')
        delname = input('> ')
        if delname == 'cancel':
            print('OK, cancelled')
            main()
        if os.path.exists(f'Projects/{delname}'):
            print('Sure? This is irreversible! Y/N')
            yn = input('> ').lower()
            if yn in ['y', 'yes']:
                path = f'Projects/{delname}'
                shutil.rmtree(path)
                print(f'OK, deleted {delname}')
                main()
        else:
            print('This project doesn\'t exist! Make sure the capitalization is correct next time.')
            main()
    elif response == 'exit':
        print('Exiting...')
        exit()
    else:
        print('Invalid response!')
        main()


if __name__ == '__main__':
    print('Welcome to Datapack Engine')
    main()
